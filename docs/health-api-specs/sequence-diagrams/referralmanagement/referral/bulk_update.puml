@startuml
title Referral - Bulk Update
!theme vibrant
participant Client as c
participant ReferralManagement as rm
participant RedisCache as rc
queue Kafka as k
database Database as db
participant FacilityService as fs
participant HouseholdService as hs
participant IndividualService as inds
participant ProjectService as ps
participant UserService as us
participant PersisterService as prs
participant IndexerService as idx
participant ErrorService as es
participant ElasticSearch as el

c -> rm : /referralmanagement/v1/bulk/_update
activate rm
rm -> rm : Validate request body

alt request validation fails
    rm -> rm: Request validation failed
    rm -> k: Referral Data /error_topic
    note left
        This will be marked as unrecoverable right away
        and require manual intervention
    end note
    activate k
    group async
        es -> k: Consume Referral Data
        activate es
        deactivate k
        es -> db: Persist Referral Data /error_table
        activate db
        deactivate db
        deactivate es
    end
    rm -> c: HttpStatus: 400 with appropriate error code
    note left
      Error Code: REQUEST_VALIDATION_FAILED
    end note
end
rm -> rm: Request validation successful
loop for each referral
    alt id is null
        rm -> rm: Check if Referral object id is null
        rm -> c: HttpStatus: 400 with appropriate error code
        note left
           Error Code: NULL_ID
        end note
    end
    rm -> rm: Check if Referral id is not null
    alt isDeleted is true
        rm -> rm: Check if Referral object isDeleted is true
        rm -> c: HttpStatus: 400 with appropriate error code
        note left
           Error Code: IS_DELETED_TRUE
        end note
    end
    rm -> rm: Check if Referral object isDeleted is not true
    alt record doesn't exist
        rm -> rc: Search record based on clientReferenceId/serverGeneratedId
        activate rc
        rc -> rm: 0 rows
        deactivate rc
        rm -> db: Search record based on clientReferenceId/serverGeneratedId
        activate db
        db -> rm: 0 row
        deactivate db
        note left
            This will be marked as unrecoverable right away
            and require manual intervention
        end note
        rm -> k: Referral Data /error_topic
        activate k
        group async
            es -> k: Consume Referral Data
            activate es
            deactivate k
            es -> db: Persist Referral Data /error_table
            activate db
            deactivate db
            deactivate es
        end
        rm -> c: HttpStatus: 400 with appropriate error code
        note left
          Error Code: RECORD_NOT_FOUND
        end note
    end
    alt record doesn't exists in cache
        rm -> rc: Search record based on clientReferenceId/serverGeneratedId
        activate rc
        rc -> rm: 0 rows
        deactivate rc
        rm -> db: Search record based on clientReferenceId/serverGeneratedId
        activate db
        db -> rm: 1 row
        deactivate db
        rm -> rc: 1 record
        activate rc
        deactivate rc
    end
    rm -> rc: Fetch the existing record
    activate rc
    rc -> rm: 1 row
    deactivate rc
    alt projectBeneficiaryId invalid
        rm -> ps: Check if projectBeneficiaryId exists
        activate ps
        ps -> db: Check if projectBeneficiaryId exists
        activate db
        db -> ps: 0 rows
        deactivate db
        ps -> rm: 0 rows
        deactivate ps
        rm -> c: HttpStatus: 400 with appropriate error code
        note left
           Error Code: DEPENDENCY_ERROR
        end note
    end
    rm -> ps: Check if projectBeneficiaryId exists
    activate ps
    ps -> db: Check if projectBeneficiaryId exists
    activate db
    db -> ps: 1 row
    deactivate db
    ps -> rm: 1 row
    deactivate ps
    alt referrerId invalid
        rm -> us: Check if referrerId exists
        activate us
        us -> db: Check if referrerId exists
        activate db
        db -> us: 0 rows
        deactivate db
        us -> rm: 0 rows
        deactivate us
        rm -> c: HttpStatus: 400 with appropriate error code
        note left
          Error Code: DEPENDENCY_ERROR
        end note
    end
    rm -> us: Check if referrerId exists
    activate us
    us -> db: Check if referrerId exists
    activate db
    db -> us: 1 row
    deactivate db
    us -> rm: 1 row
    deactivate us
    alt recipientId invalid
        alt recipientType is STAFF
            rm -> us: Check if recipientId exists
            activate us
            us -> db: Check if recipientId exists
            activate db
            db -> us: 0 rows
            deactivate db
            us -> rm: 0 rows
            deactivate us
        end
        alt recipientType is  FACILITY
            rm -> fs: Check if recipientId exists
            activate fs
            fs -> db: Check if recipientId exists
            activate db
            db -> fs: 0 rows
            deactivate db
            fs -> rm: 0 rows
            deactivate fs
        end
        rm -> c: HttpStatus: 400 with appropriate error code
        note left
          Error Code: DEPENDENCY_ERROR
        end note
    end
    alt recipientType is STAFF
        rm -> us: Check if recipientId exists
        activate us
        us -> db: Check if recipientId exists
        activate db
        db -> us: 1 row
        deactivate db
        us -> rm: 1 row
        deactivate us
    end
    alt recipientType is FACILITY
        rm -> fs: Check if recipientId exists
        activate fs
        fs -> db: Check if recipientId exists
        activate db
        db -> fs: 1 row
        deactivate db
        fs -> rm: 1 row
        deactivate fs
    end
    alt sideEffectId invalid
        rm -> db: Check if sideEffectId exists
        activate db
        db -> rm: 0 rows
        deactivate db
        rm -> c: HttpStatus: 400 with appropriate error code
        note left
          Error Code: DEPENDENCY_ERROR
        end note
    end
    rm -> db: Check if referrerId exists
    activate db
    db -> rm: 1 row
    deactivate db
    alt Duplicate Entry is present [Unique entity validation failed]
        rm -> rm: Check if Side Effect object isDeleted is true
        rm -> c: HttpStatus: 400 with appropriate error code
        note left
           Error Code: IS_DELETED_TRUE
        end note
    end
    rm -> rm: Duplicate Entry is not present [Unique entity validation successful]
    rm -> k: Referral Data /persist_topic
    activate k
    rm -> rc: Put Referral Data against clientReferenceId/serverGeneratedId in cache
    activate rc
    deactivate rc
    group async
        prs -> k: Consume Referral Data
        activate prs
        idx -> k: Consume Referral Data
        activate idx
        idx -> el: Store Referral Data
        activate el
        deactivate el
        deactivate idx
        prs -> db: Persist Referral Data
        activate db
        deactivate db
        deactivate prs
    end
    deactivate k
end
rm -> c : HttpStatus: 202 ACCEPTED
deactivate rm

@enduml